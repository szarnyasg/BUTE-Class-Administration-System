//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace STESchoolModelTypes
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(OnlineCourse))]
    [KnownType(typeof(OnsiteCourse))]
    [KnownType(typeof(Department))]
    public abstract partial class Course: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CourseID
        {
            get { return _courseID; }
            set
            {
                if (_courseID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CourseID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _courseID = value;
                    OnPropertyChanged("CourseID");
                }
            }
        }
        private int _courseID;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public int Credits
        {
            get { return _credits; }
            set
            {
                if (_credits != value)
                {
                    _credits = value;
                    OnPropertyChanged("Credits");
                }
            }
        }
        private int _credits;
    
        [DataMember]
        public int DepartmentID
        {
            get { return _departmentID; }
            set
            {
                if (_departmentID != value)
                {
                    ChangeTracker.RecordOriginalValue("DepartmentID", _departmentID);
                    if (!IsDeserializing)
                    {
                        if (Department != null && Department.DepartmentID != value)
                        {
                            Department = null;
                        }
                    }
                    _departmentID = value;
                    OnPropertyChanged("DepartmentID");
                }
            }
        }
        private int _departmentID;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Department Department
        {
            get { return _department; }
            set
            {
                if (!ReferenceEquals(_department, value))
                {
                    var previousValue = _department;
                    _department = value;
                    FixupDepartment(previousValue);
                    OnNavigationPropertyChanged("Department");
                }
            }
        }
        private Department _department;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Department = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupDepartment(Department previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Courses.Contains(this))
            {
                previousValue.Courses.Remove(this);
            }
    
            if (Department != null)
            {
                if (!Department.Courses.Contains(this))
                {
                    Department.Courses.Add(this);
                }
    
                DepartmentID = Department.DepartmentID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Department")
                    && (ChangeTracker.OriginalValues["Department"] == Department))
                {
                    ChangeTracker.OriginalValues.Remove("Department");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Department", previousValue);
                }
                if (Department != null && !Department.ChangeTracker.ChangeTrackingEnabled)
                {
                    Department.StartTracking();
                }
            }
        }

        #endregion
    }
}
