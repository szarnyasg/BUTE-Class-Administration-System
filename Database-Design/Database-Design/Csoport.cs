//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Database_Design
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Gyakorlatvezeto))]
    [KnownType(typeof(Kurzus))]
    [KnownType(typeof(Terem))]
    [KnownType(typeof(Hallgato))]
    public partial class Csoport: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Felev
        {
            get { return _felev; }
            set
            {
                if (_felev != value)
                {
                    ChangeTracker.RecordOriginalValue("Felev", _felev);
                    _felev = value;
                    OnPropertyChanged("Felev");
                }
            }
        }
        private string _felev;
    
        [DataMember]
        public decimal Sorszam
        {
            get { return _sorszam; }
            set
            {
                if (_sorszam != value)
                {
                    ChangeTracker.RecordOriginalValue("Sorszam", _sorszam);
                    _sorszam = value;
                    OnPropertyChanged("Sorszam");
                }
            }
        }
        private decimal _sorszam;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Gyakorlatvezeto Gyakorlatvezeto
        {
            get { return _gyakorlatvezeto; }
            set
            {
                if (!ReferenceEquals(_gyakorlatvezeto, value))
                {
                    var previousValue = _gyakorlatvezeto;
                    _gyakorlatvezeto = value;
                    FixupGyakorlatvezeto(previousValue);
                    OnNavigationPropertyChanged("Gyakorlatvezeto");
                }
            }
        }
        private Gyakorlatvezeto _gyakorlatvezeto;
    
        [DataMember]
        public Kurzus Kurzus
        {
            get { return _kurzus; }
            set
            {
                if (!ReferenceEquals(_kurzus, value))
                {
                    var previousValue = _kurzus;
                    _kurzus = value;
                    FixupKurzus(previousValue);
                    OnNavigationPropertyChanged("Kurzus");
                }
            }
        }
        private Kurzus _kurzus;
    
        [DataMember]
        public Terem Terem
        {
            get { return _terem; }
            set
            {
                if (!ReferenceEquals(_terem, value))
                {
                    var previousValue = _terem;
                    _terem = value;
                    FixupTerem(previousValue);
                    OnNavigationPropertyChanged("Terem");
                }
            }
        }
        private Terem _terem;
    
        [DataMember]
        public TrackableCollection<Hallgato> Hallgato
        {
            get
            {
                if (_hallgato == null)
                {
                    _hallgato = new TrackableCollection<Hallgato>();
                    _hallgato.CollectionChanged += FixupHallgato;
                }
                return _hallgato;
            }
            set
            {
                if (!ReferenceEquals(_hallgato, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_hallgato != null)
                    {
                        _hallgato.CollectionChanged -= FixupHallgato;
                    }
                    _hallgato = value;
                    if (_hallgato != null)
                    {
                        _hallgato.CollectionChanged += FixupHallgato;
                    }
                    OnNavigationPropertyChanged("Hallgato");
                }
            }
        }
        private TrackableCollection<Hallgato> _hallgato;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Gyakorlatvezeto = null;
            FixupGyakorlatvezetoKeys();
            Kurzus = null;
            FixupKurzusKeys();
            Terem = null;
            FixupTeremKeys();
            Hallgato.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupGyakorlatvezeto(Gyakorlatvezeto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Csoport.Contains(this))
            {
                previousValue.Csoport.Remove(this);
            }
    
            if (Gyakorlatvezeto != null)
            {
                if (!Gyakorlatvezeto.Csoport.Contains(this))
                {
                    Gyakorlatvezeto.Csoport.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Gyakorlatvezeto")
                    && (ChangeTracker.OriginalValues["Gyakorlatvezeto"] == Gyakorlatvezeto))
                {
                    ChangeTracker.OriginalValues.Remove("Gyakorlatvezeto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Gyakorlatvezeto", previousValue);
                }
                if (Gyakorlatvezeto != null && !Gyakorlatvezeto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Gyakorlatvezeto.StartTracking();
                }
                FixupGyakorlatvezetoKeys();
            }
        }
    
        private void FixupGyakorlatvezetoKeys()
        {
            const string IdKeyName = "Gyakorlatvezeto.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Gyakorlatvezeto == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Gyakorlatvezeto.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupKurzus(Kurzus previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Csoport.Contains(this))
            {
                previousValue.Csoport.Remove(this);
            }
    
            if (Kurzus != null)
            {
                if (!Kurzus.Csoport.Contains(this))
                {
                    Kurzus.Csoport.Add(this);
                }
    
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Kurzus")
                    && (ChangeTracker.OriginalValues["Kurzus"] == Kurzus))
                {
                    ChangeTracker.OriginalValues.Remove("Kurzus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Kurzus", previousValue);
                }
                if (Kurzus != null && !Kurzus.ChangeTracker.ChangeTrackingEnabled)
                {
                    Kurzus.StartTracking();
                }
                FixupKurzusKeys();
            }
        }
    
        private void FixupKurzusKeys()
        {
            const string IdKeyName = "Kurzus.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Kurzus == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Kurzus.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupTerem(Terem previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.Csoport, this))
            {
                previousValue.Csoport = null;
            }
    
            if (Terem != null)
            {
                Terem.Csoport = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Terem")
                    && (ChangeTracker.OriginalValues["Terem"] == Terem))
                {
                    ChangeTracker.OriginalValues.Remove("Terem");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Terem", previousValue);
                }
                if (Terem != null && !Terem.ChangeTracker.ChangeTrackingEnabled)
                {
                    Terem.StartTracking();
                }
                FixupTeremKeys();
            }
        }
    
        private void FixupTeremKeys()
        {
            const string IdKeyName = "Terem.Id";
    
            if(ChangeTracker.ExtendedProperties.ContainsKey(IdKeyName))
            {
                if(Terem == null ||
                   !Equals(ChangeTracker.ExtendedProperties[IdKeyName], Terem.Id))
                {
                    ChangeTracker.RecordOriginalValue(IdKeyName, ChangeTracker.ExtendedProperties[IdKeyName]);
                }
                ChangeTracker.ExtendedProperties.Remove(IdKeyName);
            }
        }
    
        private void FixupHallgato(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Hallgato item in e.NewItems)
                {
                    item.Csoport = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Hallgato", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Hallgato item in e.OldItems)
                {
                    if (ReferenceEquals(item.Csoport, this))
                    {
                        item.Csoport = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Hallgato", item);
                    }
                }
            }
        }

        #endregion
    }
}
