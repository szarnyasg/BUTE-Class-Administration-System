//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Database_Design
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Hallgato))]
    [KnownType(typeof(Csoport))]
    [KnownType(typeof(Terem))]
    public partial class Kurzus: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Felev
        {
            get { return _felev; }
            set
            {
                if (_felev != value)
                {
                    _felev = value;
                    OnPropertyChanged("Felev");
                }
            }
        }
        private string _felev;
    
        [DataMember]
        public decimal Het_napja
        {
            get { return _het_napja; }
            set
            {
                if (_het_napja != value)
                {
                    _het_napja = value;
                    OnPropertyChanged("Het_napja");
                }
            }
        }
        private decimal _het_napja;
    
        [DataMember]
        public bool Het_paritasa
        {
            get { return _het_paritasa; }
            set
            {
                if (_het_paritasa != value)
                {
                    _het_paritasa = value;
                    OnPropertyChanged("Het_paritasa");
                }
            }
        }
        private bool _het_paritasa;
    
        [DataMember]
        public System.TimeSpan Idosav_kezdete
        {
            get { return _idosav_kezdete; }
            set
            {
                if (_idosav_kezdete != value)
                {
                    _idosav_kezdete = value;
                    OnPropertyChanged("Idosav_kezdete");
                }
            }
        }
        private System.TimeSpan _idosav_kezdete;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Hallgato> Hallgato
        {
            get
            {
                if (_hallgato == null)
                {
                    _hallgato = new TrackableCollection<Hallgato>();
                    _hallgato.CollectionChanged += FixupHallgato;
                }
                return _hallgato;
            }
            set
            {
                if (!ReferenceEquals(_hallgato, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_hallgato != null)
                    {
                        _hallgato.CollectionChanged -= FixupHallgato;
                    }
                    _hallgato = value;
                    if (_hallgato != null)
                    {
                        _hallgato.CollectionChanged += FixupHallgato;
                    }
                    OnNavigationPropertyChanged("Hallgato");
                }
            }
        }
        private TrackableCollection<Hallgato> _hallgato;
    
        [DataMember]
        public TrackableCollection<Csoport> Csoport
        {
            get
            {
                if (_csoport == null)
                {
                    _csoport = new TrackableCollection<Csoport>();
                    _csoport.CollectionChanged += FixupCsoport;
                }
                return _csoport;
            }
            set
            {
                if (!ReferenceEquals(_csoport, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_csoport != null)
                    {
                        _csoport.CollectionChanged -= FixupCsoport;
                    }
                    _csoport = value;
                    if (_csoport != null)
                    {
                        _csoport.CollectionChanged += FixupCsoport;
                    }
                    OnNavigationPropertyChanged("Csoport");
                }
            }
        }
        private TrackableCollection<Csoport> _csoport;
    
        [DataMember]
        public TrackableCollection<Terem> Terem
        {
            get
            {
                if (_terem == null)
                {
                    _terem = new TrackableCollection<Terem>();
                    _terem.CollectionChanged += FixupTerem;
                }
                return _terem;
            }
            set
            {
                if (!ReferenceEquals(_terem, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_terem != null)
                    {
                        _terem.CollectionChanged -= FixupTerem;
                    }
                    _terem = value;
                    if (_terem != null)
                    {
                        _terem.CollectionChanged += FixupTerem;
                    }
                    OnNavigationPropertyChanged("Terem");
                }
            }
        }
        private TrackableCollection<Terem> _terem;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Hallgato.Clear();
            Csoport.Clear();
            Terem.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupHallgato(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Hallgato item in e.NewItems)
                {
                    item.Kurzus = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Hallgato", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Hallgato item in e.OldItems)
                {
                    if (ReferenceEquals(item.Kurzus, this))
                    {
                        item.Kurzus = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Hallgato", item);
                    }
                }
            }
        }
    
        private void FixupCsoport(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Csoport item in e.NewItems)
                {
                    item.Kurzus = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Csoport", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Csoport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Kurzus, this))
                    {
                        item.Kurzus = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Csoport", item);
                    }
                }
            }
        }
    
        private void FixupTerem(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Terem item in e.NewItems)
                {
                    if (!item.Kurzus.Contains(this))
                    {
                        item.Kurzus.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Terem", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Terem item in e.OldItems)
                {
                    if (item.Kurzus.Contains(this))
                    {
                        item.Kurzus.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Terem", item);
                    }
                }
            }
        }

        #endregion
    }
}
